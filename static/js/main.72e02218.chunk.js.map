{"version":3,"sources":["OnMap.jsx","GeoLocator.jsx","SocketConnector.jsx","index.js"],"names":["Display","componentDidMount","_this","map","L","renderer","setView","attribution","minZoom","maxZoom","id","addTo","render","_this$props","props","position","stomp","timer","subscribe","msg","_msg$headers","headers","latitude","longitude","centered","getZoom","circle","radius","className","setTimeout","remove","react_default","a","createElement","Component","GeoLocator","state","showPosition","setState","console","log","connected","_position$coords","coords","send","concat","navigator","geolocation","setInterval","getCurrentPosition","error","children","childrenWithProps","React","Children","child","cloneElement","Fragment","componentWillUnmount","clearInterval","DEFAULT_WS_URL","SocketLocalstorageConnector","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onConnect","wsUrl","ws","WebSocket","socket","Stomp","over","addEventListener","reconnect","connect","websocket","savedWs","Math","random","localStorage","setItem","onDisconnect","disconnect","close","renderWidgets","src_GeoLocator","src_OnMap","width","height","ref","textInput","type","defaultValue","onClick","current","value","disabled","getItem","createRef","ReactDOM","SocketConnector","document","getElementById"],"mappings":"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","file":"static/js/main.72e02218.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as L from \"leaflet\";\r\nimport \"./OnMap.css\";\r\n\r\nclass Display extends Component {\r\n  componentDidMount = () => {\r\n    this.map = L.map(\"map_osm\", {\r\n      renderer: L.svg()\r\n    }).setView([51.505, -0.09], 18);\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"OpenStreetMaps\",\r\n      minZoom: 2,\r\n      maxZoom: 30,\r\n      id: \"mapbox.streets\"\r\n    }).addTo(this.map);\r\n  };\r\n\r\n  render = () => {\r\n    const { position, stomp } = this.props;\r\n    if (position && this.map && stomp && !this.timer) {\r\n      this.props.stomp.subscribe(\"/locations/*\", msg => {\r\n        const { latitude, longitude } = msg.headers;\r\n\r\n        if (!this.centered) {\r\n          this.centered = 1;\r\n          this.map.setView([latitude, longitude], 30 - this.map.getZoom());\r\n        }\r\n        const circle = L.circle([latitude, longitude], {\r\n          radius: 4,\r\n          className: \"HeartBeat\"\r\n        }).addTo(this.map);\r\n        setTimeout(() => {\r\n          circle.remove();\r\n        }, 5000);\r\n      });\r\n    }\r\n    return <div id=\"map_osm\" className=\"LeafletMap\" />;\r\n  };\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from \"react\";\r\n\r\nclass GeoLocator extends Component {\r\n  state = {};\r\n\r\n  showPosition = position => {\r\n    if (!this.position) {\r\n      this.position = position;\r\n      this.setState({ position }, () => console.log(position));\r\n    }\r\n\r\n    if (this.props.connected) {\r\n      const {coords:{ latitude, longitude }} = position;\r\n      this.props.stomp.send(\r\n        `/locations/${this.props.id}`,\r\n        { latitude, longitude },\r\n        \"loc\"\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (navigator.geolocation) {\r\n        this.timer = setInterval(() => navigator.geolocation.getCurrentPosition(this.showPosition), 5000);\r\n    } else {\r\n      console.error(\"No navigator.geolocation\");\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    const { children } = this.props;\r\n    const childrenWithProps = React.Children.map(children, child =>\r\n      React.cloneElement(child, { position: this.state.position })\r\n    );\r\n    return <>{childrenWithProps}</>;\r\n  };\r\n\r\n\r\n  componentWillUnmount = () => {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  };\r\n}\r\n\r\nexport default GeoLocator;\r\n","import React, { Component } from \"react\";\r\nimport Stomp from \"stompjs\";\r\nimport OnMap from \"./OnMap\";\r\nimport GeoLocator from \"./GeoLocator\";\r\n\r\nconst DEFAULT_WS_URL = \"ws://localhost:3490\";\r\n\r\nclass SocketLocalstorageConnector extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      websocket: null,\r\n      connected: false,\r\n      savedWs: localStorage.getItem(\"ws\")\r\n    };\r\n    this.textInput = React.createRef();\r\n  }\r\n\r\n  onConnect = wsUrl => {\r\n    this.ws = new WebSocket(wsUrl);\r\n    this.socket = Stomp.over(this.ws);\r\n\r\n    this.ws.addEventListener(\"close\", this.reconnect);\r\n    this.ws.addEventListener(\"error\", this.reconnect);\r\n\r\n    this.socket.connect(\r\n      [],\r\n      () => {\r\n        this.setState(\r\n          {\r\n            websocket: this.socket,\r\n            connected: true,\r\n            savedWs: wsUrl,\r\n            id: Math.random()\r\n          },\r\n          () => localStorage.setItem(\"ws\", wsUrl)\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  reconnect = () => {\r\n    if (this.state.connected) {\r\n      console.log(\"Connection should be up, reconnecting in 1 sec\");\r\n      setTimeout(() => this.onConnect(this.state.savedWs), 1000);\r\n    }\r\n  };\r\n\r\n  onDisconnect = () => {\r\n    this.socket.disconnect(() => {\r\n      this.setState({ websocket: null, connected: false }, () => {\r\n        this.ws.close();\r\n        this.ws = this.socket;\r\n      });\r\n    });\r\n  };\r\n\r\n  renderWidgets = () => (\r\n    <GeoLocator\r\n      id={this.state.id}\r\n      stomp={this.state.websocket}\r\n      connected={this.state.connected}\r\n    >\r\n      <OnMap\r\n        id={this.state.id}\r\n        stomp={this.state.websocket}\r\n        width={256}\r\n        height={256}\r\n        connected={this.state.connected}\r\n      />\r\n    </GeoLocator>\r\n  );\r\n\r\n  componentDidMount = () => {\r\n    if (this.state.savedWs) {\r\n      this.onConnect(this.state.savedWs);\r\n    }\r\n  };\r\n  render = () => (\r\n    <>\r\n      {!this.state.savedWs ? (\r\n        <header>\r\n          <input\r\n            ref={this.textInput}\r\n            type=\"text\"\r\n            defaultValue={DEFAULT_WS_URL}\r\n          />\r\n          <button\r\n            onClick={() => {\r\n              this.onConnect(this.textInput.current.value);\r\n            }}\r\n            disabled={!!this.state.websocket}\r\n          >\r\n            Connect\r\n          </button>\r\n          <button onClick={this.onDisconnect} disabled={!this.state.websocket}>\r\n            Disconnect\r\n          </button>\r\n        </header>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <main>{this.renderWidgets()}</main>\r\n    </>\r\n  );\r\n\r\n  componentWillUnmount = () => {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = this.socket = null;\r\n    }\r\n  };\r\n}\r\n\r\nexport default SocketLocalstorageConnector;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './SocketConnector';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}