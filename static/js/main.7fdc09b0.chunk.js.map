{"version":3,"sources":["OnMap.jsx","GeoLocator.jsx","SocketConnector.jsx","index.js"],"names":["Display","componentDidMount","_this","map","L","renderer","setView","attribution","minZoom","maxZoom","id","addTo","render","_this$props","props","position","stomp","timer","_position$coords","coords","latitude","longitude","Math","random","subscribe","msg","_msg$headers","headers","centered","getZoom","circle","radius","setTimeout","remove","setInterval","send","concat","react_default","a","createElement","className","componentWillUnmount","clearInterval","Component","GeoLocator","state","showPosition","setState","console","log","navigator","geolocation","getCurrentPosition","error","children","childrenWithProps","React","Children","child","cloneElement","Fragment","DEFAULT_WS_URL","SocketLocalstorageConnector","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onConnect","wsUrl","ws","WebSocket","socket","Stomp","over","addEventListener","reconnect","connect","websocket","connected","savedWs","localStorage","setItem","bind","onDisconnect","disconnect","close","renderWidgets","src_GeoLocator","src_OnMap","width","height","ref","textInput","type","defaultValue","onClick","current","value","disabled","getItem","createRef","ReactDOM","SocketConnector","document","getElementById"],"mappings":"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","file":"static/js/main.7fdc09b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as L from \"leaflet\";\r\nimport './OnMap.css';\r\n\r\nclass Display extends Component {\r\n\r\n    componentDidMount = () => {\r\n\r\n        this.map = L.map(\"map_osm\", {\r\n            renderer: L.svg()\r\n        }).setView([51.505, -0.09], 18);\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: 'OpenStreetMaps',\r\n            minZoom: 2,\r\n            maxZoom: 30,\r\n            id: \"mapbox.streets\"\r\n        }).addTo(this.map);\r\n\r\n    }\r\n\r\n    render = () => {\r\n        const { position, stomp } = this.props;\r\n        if (position && this.map && stomp && !this.timer) {\r\n            const { coords: { latitude, longitude } } = position;\r\n            this.id = Math.random();\r\n            this.props.stomp.subscribe('/locations/*', msg => {\r\n                \r\n                const {latitude,longitude} = msg.headers;\r\n\r\n                if(!this.centered) {\r\n                    this.centered=1;\r\n                    this.map.setView([latitude, longitude], 30 - this.map.getZoom());\r\n                }\r\n                const circle = L.circle([latitude, longitude], { radius: 5}).addTo(this.map);\r\n                setTimeout(()=>{circle.remove()},5000);\r\n\r\n            });\r\n            this.timer = setInterval(() => {\r\n                this.props.stomp.send(`/locations/${this.id}`, { latitude, longitude }, 'loc');\r\n            }, 5000)\r\n            this.props.stomp.subscribe()\r\n        }\r\n        return <div id=\"map_osm\" className=\"LeafletMap\"></div>;\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Display;\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nclass GeoLocator extends Component {\r\n    state = {}\r\n\r\n    showPosition = position => {\r\n        this.setState({ position }, ()=>console.log(position));\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.showPosition);\r\n        } else {\r\n            console.error('No navigator.geolocation');\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        const { children } = this.props;\r\n        const childrenWithProps = React.Children.map(children, child =>\r\n            React.cloneElement(child, { position: this.state.position })\r\n        );\r\n        return <>{childrenWithProps}</>;\r\n    };\r\n}\r\n\r\nexport default GeoLocator;\r\n","import React, { Component } from \"react\";\r\nimport Stomp from \"stompjs\";\r\nimport OnMap from \"./OnMap\";\r\nimport GeoLocator from './GeoLocator';\r\n\r\nconst DEFAULT_WS_URL = \"ws://localhost:3490\";\r\n\r\nclass SocketLocalstorageConnector extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { websocket: null, connected: false, savedWs: localStorage.getItem(\"ws\") };\r\n    this.textInput = React.createRef();\r\n  }\r\n\r\n  onConnect = (wsUrl) => {\r\n    this.ws = new WebSocket(wsUrl);\r\n    this.socket = Stomp.over(this.ws);\r\n\r\n    this.ws.addEventListener('close', this.reconnect);\r\n    this.ws.addEventListener('error', this.reconnect);\r\n\r\n    this.socket.connect(\r\n      [],\r\n      () => {\r\n        this.setState({ websocket: this.socket, connected: true, savedWs: wsUrl },\r\n          () => localStorage.setItem(\"ws\", wsUrl));\r\n      }\r\n    );\r\n  };\r\n\r\n  reconnect = () => {\r\n    if (this.state.connected) {\r\n      console.log('Connection should be up, reconnecting in 1 sec');\r\n      setTimeout(this.onConnect.bind(this.state.savedWs), 1000);\r\n    }\r\n  }\r\n\r\n  onDisconnect = () => {\r\n    this.socket.disconnect(() => {\r\n      this.setState({ websocket: null, connected: false }, () => {\r\n        this.ws.close();\r\n        this.ws = this.socket;\r\n      });\r\n    });\r\n  };\r\n\r\n  renderWidgets = () =>\r\n    <GeoLocator>\r\n      <OnMap stomp={this.state.websocket} width={256} height={256} connected={this.state.connected}></OnMap>\r\n    </GeoLocator>;\r\n\r\n  componentDidMount = () => {\r\n    if (this.state.savedWs) {\r\n      this.onConnect(this.state.savedWs);\r\n    }\r\n  }\r\n  render = () => (\r\n    <>\r\n      {!this.state.savedWs ?\r\n        <header>\r\n          <input ref={this.textInput} type=\"text\" defaultValue={DEFAULT_WS_URL} />\r\n          <button onClick={() => { this.onConnect(this.textInput.current.value) }} disabled={!!this.state.websocket}>\r\n            Connect\r\n        </button>\r\n          <button onClick={this.onDisconnect} disabled={!this.state.websocket}>\r\n            Disconnect\r\n        </button>\r\n        </header> :\r\n        <></>}\r\n      <main>\r\n        {this.renderWidgets()}\r\n      </main>\r\n    </>\r\n  );\r\n\r\n  componentWillUnmount = () => {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = this.socket = null;\r\n    }\r\n  };\r\n}\r\n\r\nexport default SocketLocalstorageConnector;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './SocketConnector';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}